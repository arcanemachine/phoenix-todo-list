#!/bin/sh

if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
  echo "Copy this project's Caddyfile to the Caddy config directory, then validate the config and restart Caddy.

This script accepts a single positional argument that will specify the Caddyfile to use.
  - Must be one of: local, vagrant, staging, prod
    - local: Uses 'localhost' subdomain
    - vagrant: Like local, but sets a manual path for the TLS certificates.
      - Designed for use with Vagrant (https://github.com/hashicorp/vagrant)
    - This allows a self-signed certificate to be made on the host (e.g. using 'mkcert'), and used in the VM.
    - staging: Uses a live domain name, but not the production one.
      - e.g. staging.your-project.com
    - prod: Uses a live domain name"
  exit
fi

# navigate to project root directory
cd "$(dirname "$0")/../.." || exit 1

# use first positional argument to set caddyfile type
if [ "$1" = "local" ] || [ "$1" = "vagrant" ] || [ "$1" = "staging" ] || [ "$1" = "prod" ]; then
  echo "Using '$1' Caddyfile..."
  caddyfile_to_use="support/deployment/caddy/Caddyfile.$1"
else

  # if invalid caddyfile type is specified, then abort
  echo "\033[91mFirst positional argument must be one of: local, vagrant, staging, prod. Aborting...\033[39m"
  exit 1

fi

caddy_config_dir="/etc/caddy"
caddyfile_full_path="$caddy_config_dir/Caddyfile"

if [ ! -d $caddy_config_dir ]; then
  echo "Could not find Caddy config directory '$caddy_config_dir'. Aborting..."
elif [ -f "$caddy_config_dir/Caddyfile" ]; then

  # back up old caddyfile if it is different from the new one
  if ! diff "$caddyfile_to_use" "$caddyfile_full_path"; then
    current_time=$(date +%s%3N)
    backup_caddyfile_name="Caddyfile.$current_time.bak"
    backup_caddyfile_full_path="$caddy_config_dir/$backup_caddyfile_name"

    echo "Backing up existing Caddyfile to '$backup_caddyfile_full_path'..."
    sudo cp $caddyfile_full_path "$backup_caddyfile_full_path"
  else
    echo "\033[96mThe new Caddyfile is the same as the old one, so we don't need to backup the old Caddyfile.\033[39m"
  fi
fi

# copy the caddyfile to the caddy config directory
if ! sudo cp "$caddyfile_to_use" "$caddyfile_full_path"; then
  echo "\033[91mCould not copy the Caddyfile to '$caddy_config_dir'. Aborting...\033[39m"
  exit 1
fi

# validate the caddy config
cd "$caddy_config_dir" || exit 1
caddy validate

# reload caddy
sudo caddy reload
