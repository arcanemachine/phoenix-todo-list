#!/bin/sh
service_name="phoenix-todo-list"
service_file="${HOME}/.config/systemd/user/${service_name}.service"

if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
  echo "This script generates a user-level systemd service file.

It can run a combination of Phoenix, Postgres, and Traefik containers.

Optional arguments:

  --dry-run - Only displays the output of this script. Does not write any files.

  --podman - Use Podman instead of Docker.

  --docker-compose - Use 'docker-compose' instead of 'docker compose' (for older versions of Docker)

  --expose-phoenix - Expose the PHX_HOST port to the host environment

  --postgres - Enables the use of a Postgres server container when running the service.

  --expose-postgres - Expose Postgres port 5432 to the host environment

  - Traefik-specific options:

    --dev - Configures the service for a development environment (i.e. no HTTPS).
      - If no option is selected, then 'dev' will be used by default.

    --staging - Configures the service for a production environment (i.e. uses HTTPS).

    --prod - Configures the service for a production environment (i.e. uses HTTPS).

    --traefik-client - Configures the service to be used with Traefik.
      - This flag does not run a Traefik server. It just configures the service to work with a Traefik server defined elsewhere on the server.

    --traefik-host - Runs a Traefik container as part of the service.


After running this script:

  - The output will be sent here:
    - '$service_file'

  - Before you can manage the systemd service, you will need to reload the systemd daemons:
    - systemctl --user daemon-reload

  - To enable this service:
    - systemctl --user enable $service_name.service

  - To start this service:
    - systemctl --user start $service_name.service

  - In order to start this service on boot, you must enabling lingering for this user:
    - sudo loginctl enable-linger $USER

  - If you are having issues with the service, you can examine the logs for the service:
    - journalctl --user -xefu $service_name"
  exit
fi

current_script_directory="$(dirname "$0")"
project_root_directory="$(cd "${current_script_directory}/../.." && pwd)"
working_directory="${project_root_directory}/support/containers"

# parse args
while test $# -gt 0; do
  case "$1" in
  --dry-run)
    # print output to console; do not write any files
    dry_run=1
    ;;
  --podman)
    # use podman instead of docker
    use_podman=1
    ;;
  --docker-compose)
    # use docker-compose instead of 'docker compose'
    use_docker_compose=1
    ;;
  --dev)
    # configures traefik for use in a dev deployment (i.e. no HTTPS)
    is_dev=1
    ;;
  --staging)
    # configures traefik for use in a staging deployment (i.e. HTTPS + Let's Encrypt staging environment)
    is_staging=1
    ;;
  --prod)
    # configures traefik for use in a production deployment (i.e. uses HTTPS)
    is_prod=1
    ;;
  --expose-phoenix)
    # configure the service for use with traefik and start a traefik server
    expose_phoenix=1
    ;;
  --postgres)
    # run a postgres server as part of the service
    use_postgres=1
    ;;
  --expose-postgres)
    # configure the service for use with traefik and start a traefik server
    expose_postgres=1
    ;;
  --traefik-client)
    # configure the service for use with traefik, but don't start a traefik server
    use_traefik_client=1
    ;;
  --traefik-host)
    # configure the service for use with traefik and start a traefik server
    use_traefik_host=1
    ;;
  esac
  shift
done

# validate args - do not allow '--traefik-client' and '--traefik-host' to be
# passed at the same time
if [ "$use_traefik_client" = 1 ] && [ "$use_traefik_host" = 1 ]; then
  printf "\033[91mYou cannot pass the '--traefik-client' and '--traefik-host' flags at the same time.\033[39m
If you only need to add the labels so an existing Traefik container can detect this service, pass the '--traefik-client' flag.
If you want to start a Traefik container as part of this service, pass the '--traefik-host' flag. This flag will also add the necessary labels to the web server container.
Aborting...\n"
  exit 1
fi

# navigate to current script directory
cd "$current_script_directory" || exit 1

# maybe source dotenv
dotenv_path="${project_root_directory}/.env"
if [ -f "$dotenv_path" ]; then
  if [ "$dry_run" != 1 ]; then
    echo "Importing environment from '$dotenv_path'..."
  fi

  set -o allexport
  # shellcheck source=/dev/null
  . "${project_root_directory}/.env"
  set +o allexport
else
  printf "\033[33mNo dotenv file exists found at '%s'. The generated systemd file may not have all expected environment variables.\nIf you are configuring your environment by a means other than dotenv files (e.g. Ansible), then you can safely ignore this message.\033[39m\n" "$dotenv_path"
fi

# maybe use podman instead of docker
if [ "$use_podman" = 1 ]; then
  # configure service for use with podman
  podman_socket_path=$(podman info --format '{{.Host.RemoteSocket.Path}}')
  maybe_podman_config=" -H unix:${podman_socket_path}"
else
  use_docker=1 # use docker-specific options in the systemd service file
fi

# set deployment_environment (based on DEPLOYMENT_ENVIRONMENT env var, or relevant flags)
# shellcheck disable=SC2153
deployment_environment="$DEPLOYMENT_ENVIRONMENT" # use global env var by default
if [ "$is_dev" = 1 ]; then
  deployment_environment="dev"
elif [ "$is_staging" = 1 ]; then
  deployment_environment="staging"
elif [ "$is_prod" = 1 ]; then
  deployment_environment="prod"
elif [ "$deployment_environment" = "" ]; then
  printf "\033[96mNo deployment type specified. Using 'dev' (no HTTPS)...\033[39m\n"
  deployment_environment="dev"
fi

# containers_to_run #
# phoenix
containers_to_run="-f compose.phoenix.yaml"

if [ "$use_traefik_client" = 1 ] || [ "$use_traefik_host" = 1 ]; then
  if [ "$expose_phoenix" = 1 ]; then
    printf "\033[33mYour configuration will expose the PHX_HOST port directly, while also proxying the service through Traefik. This is probably not necessary.\033[39m\n"
  fi

  containers_to_run="$containers_to_run -f networks/compose.phoenix-traefik.yaml -f compose.phoenix-config-traefik-${deployment_environment}.yaml"
elif [ "$expose_phoenix" = 1 ]; then
  containers_to_run="$containers_to_run -f networks/compose.phoenix-expose.yaml"
else
  printf "\033[33mNo host has been specified. You may not be able to connect to this service.\033[39m\n"
fi

# postgres
if [ "$use_postgres" = 1 ]; then
  containers_to_run="$containers_to_run -f compose.phoenix-postgres.yaml -f compose.postgres.yaml"

  if [ "$expose_postgres" = 1 ]; then
    # enable postgres host networking
    containers_to_run="$containers_to_run -f networks/compose.postgres-expose.yaml"
  fi
fi

# traefik
if [ "$use_traefik_host" ]; then
  # run traefik container
  containers_to_run="$containers_to_run -f compose.traefik.yaml -f compose.traefik-config-${deployment_environment}.yaml"
fi

# for dry_run, print output to terminal instead of writing to a file
if [ "$dry_run" = 1 ]; then
  output_to=/dev/stdout
else
  output_to="${service_file}"
fi

if [ "$dry_run" != 1 ]; then
  echo "Creating systemd service file: '${output_to}'"
fi

# determine which container orchestrator should be used (docker-compose or 'docker compose')
if [ "$use_docker" = 1 ] && [ "$use_docker_compose" != 1 ]; then
  container_orchestrator="docker compose"
else
  container_orchestrator="$(which docker-compose)"
fi

command_to_run="${container_orchestrator}${maybe_podman_config} $containers_to_run"

if [ "$dry_run" != 1 ]; then
  # create script for managing the container service manually (helps with debugging compose issues)
  container_management_script="$working_directory/container-management-script.gitignored"
  printf "\033[96mCreating a container service management helper script: '%s'...\033[39m\n" "$container_management_script"
  echo "cd $working_directory && $command_to_run \"\$@\"" >"$container_management_script"
  chmod +x "$container_management_script"
fi

# generate the service file
echo "[Unit]
Description=$service_name
${use_docker:+After=docker.service}
${use_podman:+Wants=network-online.target}
${use_podman:+After=network-online.target}
${use_podman:+Requires=podman.service}
${use_podman:+RequiresMountsFor=/run/user/$(id -u)/containers}

[Service]
Restart=always
WorkingDirectory=$working_directory

# ENVIRONMENT #
## docker
Environment=COMPOSE_PROJECT_NAME=\"${COMPOSE_PROJECT_NAME:-$service_name}\"

# fix container timeout issues caused by slow CPU and/or RAM
Environment=DOCKER_CLIENT_TIMEOUT=180
Environment=COMPOSE_HTTP_TIMEOUT=180

## phoenix
Environment=PHX_HOST=\"$PHX_HOST\"
Environment=PORT=$PORT
Environment=SECRET_KEY_BASE=\"$SECRET_KEY_BASE\"

## database
Environment=POSTGRES_USER=\"$POSTGRES_USER\"
Environment=POSTGRES_PASSWORD=\"$POSTGRES_PASSWORD\"
Environment=POSTGRES_HOST=\"$POSTGRES_HOST\"
Environment=POSTGRES_DB=\"$POSTGRES_DB\"
Environment=DATABASE_URL=\"$DATABASE_URL\"

## email
Environment=AWS_REGION=\"$AWS_REGION\"
Environment=AWS_ACCESS_KEY=\"$AWS_ACCESS_KEY\"
Environment=AWS_SECRET=\"$AWS_SECRET\"

## sentry
Environment=SENTRY_DSN=\"$SENTRY_DSN\"

## traefik (used when running a Traefik host as part of this project's container service)
# Environment=TRAEFIK_DASHBOARD_FQDN=\"$TRAEFIK_DASHBOARD_FQDN\"

# LIFECYCLE #
ExecStartPre=$command_to_run down
ExecStart=$command_to_run up
ExecStop=$command_to_run down -t 5

[Install]
WantedBy=default.target" >"${output_to}"
