#!/bin/sh

if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
  # show help info and exit
  echo "
A helper script for running Elixir tests. Runs tests in 'watch mode' so that tests will be re-run when a file is changed (requires 'ag' and 'entr' to be installed).

## Running Specific Tests

You can run specific tests by line number or tag.


### Running Tests from a Specific Module

To run tests from a specific module, specify the path to the module that contains the desired test. For example:

  - './scripts/test-elixir test/your_test.ex'


### Running Tests By Line Number

To run a test by its line number, specify the path to the module that contains the desired test, and append a colon and the desired line number to the file path. For example:

  - './scripts/test-elixir test/your_test.ex:123'


### Running Tests By Tag

To test by tag, the test must first be given a tag. For example:

  @tag your_tag: true  # you can use key-value pair to describe the tag
  describe 'your_test' do
    ...
  end

Then, to run the tagged tests, pass the '--include' flag with the matching key-value pair when starting the test runner. For example:

  - './scripts/test-elixir --only your_tag:true'  # no space between key and value


## Excluding Specific Tests

You can exclude specific tests by tag. Follow the instructions above to add a tag to the test(s) you want to exclude.


### Excluding Tests by Tag

To exclude the tagged test(s), pass the '--exclude' flag with the matching key-value pair when starting the test runner:

  - './scripts/test-elixir --exclude your_tag:true'  # no space between key and value


## Running Tests Sequentially

Tests can be run in a non-random order by setting the seed to 0. For example:

  - 'mix test --seed 0'
"
  exit 0
fi

# navigate to project root directory
cd "$(dirname "$0")/../.." || exit 1

# run the tests
until ag -g "\.(ex|exs|eex|heex|js|ts)$" | entr -d mix test "$@"; do sleep 1; done
